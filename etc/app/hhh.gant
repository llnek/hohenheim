/* DO NOT EDIT THIS FILE, IT IS MAINTAINED BY THE
      FRAMEWORK
project-name="hohenheim-runner"
*/
import java.util.UUID

//////////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////////

def generateGUID() { UUID.randomUUID() }

//////////////////////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////////////////////

property (name: 'hohenheimHome', value: System.getenv('HOHENHEIM_HOME'))
property (name: 'appsDir', value: "${hohenheimHome}/apps")
property (name: 'podsDir', value: "${hohenheimHome}/pods")
property (name: 'appDomainPath',
value: ${hohenheimAppDomain}.replace('.','/'))
property (name: 'appDir', value: "${appsDir}/${hohenheimAppid}")
property (name: 'srcMain', value: "${appDir}/src/main" )
property (name: 'srcTest', value: "${appDir}/src/test" )

property (name: 'srcClojure',
value: new File("${srcMain}/clojure").isDirectory() )
property (name: 'srcGroovy',
value: new File("${srcMain}/groovy").isDirectory()  )
property (name: 'srcScala',
value:  new File("${srcMain}/scala").isDirectory() )
property (name: 'srcJava',
value:  new File("${srcMain}/java").isDirectory() )

property (name: 'testRptDir', value: "${tmpDir}/test-reports")
property (name: 'testCzDir', value: "${tmpDir}/test-classes")
property (name: 'czDir',  value: "${appDir}/POD-INF/classes" )
property (name: 'webzDir', value: "${appDir}/WEB-INF/classes" )
property (name: 'podzDir', value: "${czDir}")

path (id: 'compileClassPath') {
  fileset (dir: "${appDir}/POD-INF/lib") {
    include (name: '**/*.jar')
  }
  fileset (dir: "${hohenheimHome}/patch") {
    include (name: '**/*.jar')
  }
  fileset (dir: "${hohenheimHome}/dist") {
    include (name: '**/*.jar')
  }
  fileset (dir: "${hohenheimHome}/lib") {
    include (name: '**/*.jar')
  }
}

path (id: 'compileTestClassPath') {
  pathelement (path: "${testCzDir}")
  pathelement (path: "${czDir}")
  path (refid: 'compileClassPath')
}

target (release: '') {
  println 'hello world'
}

target (clean; '') {
  depends (cleanClasses)
}

target (cleanClasses: '') {
  delete (dir: "${webzDir}", quiet: true, failonerror: false)
  delete (dir: "${czDir}", quiet: true, failonerror: false)
  mkdir (dir: "${czDir}")
}

target (compileTestCode: '') {
  depends(compileCode)
  delete (dir: "${testRptDir}", quiet: true)
  delete (dir: "${testCzDir}", quiet: true)
  mkdir (dir: "${testRptDir}")
  mkdir (dir: "${testCzDir}")
  ct_j()
  ct_g()
  ct_s()
}

target (compileCode: '') {
  depends(cleanClasses)
  taskdef (name: 'groovyc',
    classname: 'org.codehaus.groovy.ant.Groovyc',
    classpathref: 'compileClassPath')
  taskdef (name: 'scalac',
    classname: 'scala.tools.ant.Scalac',
    classpathref: 'compileClassPath')
  cc_j()
  cc_g()
  cc_s()
}

target (cc_j: '') {
  if (${srcJava} == true) {} else {return}
  javac (destdir: "${czDir}", srcdir: "${srcMain}/java",
      includeAntRuntime: false,
      debug: 'on',
      debuglevel: 'lines,vars,source') {
    classpath (refid: 'compileClassPath')
  }
  ant.copy (todir: "${czDir}") {
    fileset (dir: "${srcMain}/java") {
      exclude (name: '**/*.java')
      exclude (name: '**/.svn')
    }
  }
}

target (ct_j: '') {
  if (${srcJava} == true) {} else { return }
  javac (destdir: "${testCzDir}", 
  srcdir: "${srcTest}/java",
        includeAntRuntime: false,
        debug: 'on', debuglevel: 'lines,vars,source') {
    classpath (refid: 'compileTestClassPath')
  }
  ant.copy (todir: "${testCzDir}") {
    fileset (dir: "${srcTest}/java") {
      exclude (name: '**/*.java')
      exclude (name: '**/.svn')
    }
  }
}

target (cc_g: '') {
  if (${srcGroovy} == true) {} else { return }
  groovyc (destdir: "${czDir}", srcdir: "${srcMain}/groovy") {
    classpath (refid: 'compileClassPath')
  }
  ant.copy (todir: "${czDir}") {
    fileset (dir: "${srcMain}/groovy") {
      exclude (name: '**/*.groovy')
      exclude (name: '**/.svn')
    }
  }
}

<target name="ct-g" depends="" if="src.groovy">
  <groovyc destdir="${test.cz.dir}" srcdir="${src.test}/groovy" >
      <classpath refid="compile.test.classpath"/>
  </groovyc>
  <copy todir="${test.cz.dir}">
    <fileset dir="${src.test}/groovy">
      <exclude name="**/*.groovy"/>
      <exclude name="**/.svn"/>
    </fileset>
  </copy>
</target>

    <target name="cc-s" depends="" if="src.scala">
      <scalac destdir="${cz.dir}" srcdir="${src.main}/scala"
          classpathref="compile.classpath">
          <include name="**/*.scala"/>
      </scalac>
      <copy todir="${cz.dir}">
        <fileset dir="${src.main}/scala">
          <exclude name="**/*.scala"/>
          <exclude name="**/.svn"/>
        </fileset>
      </copy>
    </target>

    <target name="ct-s" depends="" if="src.scala">
      <scalac destdir="${test.cz.dir}" srcdir="${src.test}/scala"
            classpathref="compile.test.classpath">
        <include name="**/*.scala"/>
      </scalac>
      <copy todir="${test.cz.dir}">
        <fileset dir="${src.test}/scala">
          <exclude name="**/*.scala"/>
          <exclude name="**/.svn"/>
        </fileset>
      </copy>
    </target>

    <target name="jar" depends="">
      <jar destfile="${app.dir}/POD-INF/lib${app.name}.jar" basedir="${cz.dir}"/>
      <delete dir="${cz.dir}"/>
      <mkdir dir="${cz.dir}"/>
    </target>

    <target name="run-app-bg-nix" depends="">
        <exec executable="${hohenheim.home}/bin/hohenheim" dir="${hohenheim.home}">
            <arg value="app"/>
            <arg value="start"/>
            <arg value="bg"/>
        </exec>
    </target>

    <target name="run-app-bg-w32" depends="">
        <exec executable="cmd.exe" dir="${hohenheim.home}">
            <arg value="/C"/>
            <arg value="start"/>
            <arg value="/B"/>
            <arg value="/MIN"/>
            <arg value="${hohenheim.home}/bin/hohenheim.bat"/>
            <arg value="start"/>
        </exec>
    </target>

    <target name="run-dbg-app-w32" depends="">
        <exec executable="${hohenheim.home}/bin/hohenheim.bat" dir="${hohenheim.home}">
            <arg value="debug"/>
        </exec>
    </target>

    <target name="run-dbg-app-nix" depends="">
        <exec executable="${hohenheim.home}/bin/hohenheim" dir="${hohenheim.home}">
            <arg value="debug"/>
        </exec>
    </target>

    <target name="test-code" depends="compile-test-code">
      <junit logfailedtests="true" showoutput="false" printsummary="yes" fork="yes" haltonfailure="yes" >
        <classpath refid="compile.test.classpath"/>
        <batchtest todir="${test.rpt.dir}" >
            <fileset dir="${test.cz.dir}">
                <include name="**/Test*.*"/>
            </fileset>
            <formatter type="plain" usefile="false"/>
        </batchtest>
      </junit>
    </target>

    <target name="create-demo" if="demo.id">
      <available file="${hohenheim.home}/docs/samples/${demo.id}.pod" property="demo.pod.ok"/>
      <if><equals arg1="${demo.pod.ok}" arg2="true"/>
        <then>
          <mkdir dir="${apps.dir}/demo-${demo.id}"/>
          <unzip src="${hohenheim.home}/docs/samples/${demo.id}.pod" dest="${apps.dir}/demo-${demo.id}" />
        </then>
        <else>
          <echo message="Cannot locate ${demo.id}.pod."/>
        </else>
      </if>
    </target>

    <target name="create-samples">
      <for param="pod">
        <path>
          <fileset dir="${hohenheim.home}/docs/samples">
            <include name="*.pod"/>
          </fileset>
        </path>
        <sequential>
          <var name="appid" value="" unset="true"/>
          <basename property="appid" file="@{pod}" suffix=".pod"/>
          <mkdir dir="${apps.dir}/demo-${appid}"/>
          <unzip src="@{pod}" dest="${apps.dir}/demo-${appid}" />
        </sequential>
      </for>
    </target>

    <target name="create-app">
      <antcall target="create-app-common"/>
      <copy todir="${app.dir}" file="${hohenheim.home}/etc/app/build.xml"/>
      <antcall target="post-create-app"/>
    </target>

    <target name="create-app-common">
      <mkdir dir="${app.dir}"/>
      <touch file="${app.dir}/POD-INF/classes/dummy.txt" mkdirs="true"/>
      <touch file="${app.dir}/POD-INF/patch/dummy.txt" mkdirs="true"/>
      <touch file="${app.dir}/POD-INF/lib/dummy.txt" mkdirs="true"/>
      <mkdir dir="${app.dir}/META-INF"/>
      <copy todir="${app.dir}/META-INF" file="${hohenheim.home}/etc/app/MANIFEST.MF"/>
      <touch file="${app.dir}/META-INF/RELEASE-NOTES.txt" />
      <touch file="${app.dir}/META-INF/NOTES.txt" />
      <touch file="${app.dir}/META-INF/LICENSE.txt" />
      <touch file="${app.dir}/META-INF/README.md" />

      <mkdir dir="${app.dir}/modules"/>
      <!--
      <copy todir="${app.dir}/modules" file="${hohenheim.home}/etc/modules/module_auth"/>
      <replace file="${app.dir}/modules/module_auth" token="@@HHH_HOME@@" value="${hohenheim_home}"/>
      <replace file="${app.dir}/modules/module_auth" token="@@APP_DIR@@" value="${app.dir}"/>
      <chmod file="${app.dir}/modules/module_auth" perm="755" />
      -->
      <mkdir dir="${app.dir}/conf"/>
      <copy todir="${app.dir}/conf" file="${hohenheim.home}/etc/app/app.conf"/>
      <copy todir="${app.dir}/conf" file="${hohenheim.home}/etc/app/env.conf"/>
      <copy todir="${app.dir}/conf" file="${hohenheim.home}/etc/app/shiro.ini"/>
      <replace file="${app.dir}/conf/app.conf" token="@@USER@@" value="${user.name}"/>
      <mkdir dir="${app.dir}/src/main/clojure/${app.domain.path}"/>
      <mkdir dir="${app.dir}/src/main/scala"/>
      <mkdir dir="${app.dir}/src/main/java"/>
      <mkdir dir="${app.dir}/src/main/resources"/>
      <copy todir="${app.dir}/src/main/clojure/${app.domain.path}" file="${hohenheim.home}/etc/app/core.clj"/>
      <copy todir="${app.dir}/src/main/clojure/${app.domain.path}" file="${hohenheim.home}/etc/app/pipe.clj"/>
      <mkdir dir="${app.dir}/src/test/clojure/${app.domain.path}"/>
      <mkdir dir="${app.dir}/docs"/>

      <copy todir="${app.dir}" file="${hohenheim.home}/etc/app/build.properties"/>
      <copy todir="${app.dir}" file="${hohenheim.home}/etc/app/ivysettings.xml"/>
      <copy todir="${app.dir}" file="${hohenheim.home}/etc/app/ivy.xml"/>
      <copy todir="${app.dir}" file="${hohenheim.home}/etc/app/pom.xml"/>

      <replace file="${app.dir}/META-INF/MANIFEST.MF" token="@@APPKEY@@" value="${uuid}"/>
      <replace file="${app.dir}/META-INF/MANIFEST.MF" token="@@APPMAINCLASS@@"
        value="${hohenheim.app.domain}.core.MyAppMain"/>
      <replace file="${app.dir}/pom.xml" token="@@APPDOMAIN@@" value="${hohenheim.app.domain}"/>
      <replace file="${app.dir}/pom.xml" token="@@APPID@@" value="${hohenheim.appid}"/>
      <replace file="${app.dir}/ivy.xml" token="@@APPID@@" value="${hohenheim.appid}"/>
      <replace file="${app.dir}/ivy.xml" token="@@APPDOMAIN@@" value="${hohenheim.app.domain}"/>
      <replace file="${app.dir}/build.properties"
        token="@@HOHENHEIMHOME@@" value="${hohenheim.home}"/>

    </target>

    <target name="create-jetty">
      <antcall target="create-app-common"/>
      <antcall target="create-web-common"/>
      <mkdir dir="${app.dir}/WEB-INF/classes"/>
      <mkdir dir="${app.dir}/WEB-INF/lib"/>
      <copy tofile="${app.dir}/conf/env.conf" file="${hohenheim.home}/etc/jetty/jetty.conf" overwrite="true"/>
      <copy todir="${app.dir}/WEB-INF" file="${hohenheim.home}/etc/jetty/web.xml"/>
      <antcall target="post-create-app"/>
    </target>

    <target name="create-web">
      <antcall target="create-app-common"/>
      <antcall target="create-web-common"/>
      <copy todir="${app.dir}/conf" overwrite="true">
        <fileset dir="${hohenheim.home}/etc/netty">
            <include name="*.conf"/>
        </fileset>
      </copy>
      <copy todir="${app.dir}/conf" file="${hohenheim.home}/etc/netty/static-routes.conf" overwrite="true"/>
      <copy todir="${app.dir}/conf" file="${hohenheim.home}/etc/netty/routes.conf" overwrite="true"/>
      <copy todir="${app.dir}/public/images" file="${hohenheim.home}/etc/web/favicon.png"/>
      <mkdir dir="${app.dir}/pages/errors"/>
      <mkdir dir="${app.dir}/pages/views"/>
      <copy todir="${app.dir}/pages/views" >
        <fileset dir="${hohenheim.home}/etc/netty">
          <include name="*.ftl"/>
        </fileset>
      </copy>
      <copy todir="${app.dir}/pages" >
        <fileset dir="${hohenheim.home}/etc/netty">
          <exclude name="index.html"/>
          <include name="*.html"/>
        </fileset>
      </copy>
      <copy todir="${app.dir}/public" file="${hohenheim.home}/etc/netty/index.html"/>
      <copy todir="${app.dir}/src/main/resources/less" file="${hohenheim.home}/etc/netty/main.less"/>
      <replace file="${app.dir}/conf/routes.conf" token="@@APPDOMAIN@@" value="${hohenheim.app.domain}"/>
      <copy todir="${app.dir}/src/main/clojure/${app.domain.path}"
        file="${hohenheim.home}/etc/netty/pipe.clj" overwrite="true"/>
      <antcall target="post-create-app"/>
    </target>

    <target name="create-web-common">
      <mkdir dir="${app.dir}/src/main/resources/coffee"/>
      <mkdir dir="${app.dir}/src/main/resources/js"/>
      <mkdir dir="${app.dir}/src/main/resources/less"/>
      <mkdir dir="${app.dir}/public/images"/>
      <mkdir dir="${app.dir}/public/scripts"/>
      <mkdir dir="${app.dir}/public/styles"/>
      <copy todir="${app.dir}/public/images" file="${hohenheim.home}/etc/web/favicon.png"/>
      <copy todir="${app.dir}/src/main/clojure/${app.domain.path}"
        file="${hohenheim.home}/etc/web/pipe.clj" overwrite="true"/>
      <copy todir="${app.dir}/public">
        <fileset dir="${hohenheim.home}/etc/weblibs"/>
      </copy>
      <copy todir="${app.dir}" file="${hohenheim.home}/etc/web/build.xml"/>
    </target>

    <target name="post-create-app">
      <replace file="${app.dir}/src/main/clojure/${app.domain.path}/core.clj"
        token="@@APPDOMAIN@@" value="${hohenheim.app.domain}"/>
      <replace file="${app.dir}/src/main/clojure/${app.domain.path}/pipe.clj"
        token="@@APPDOMAIN@@" value="${hohenheim.app.domain}"/>
      <replace file="${app.dir}/conf/env.conf" token="@@APPDOMAIN@@" value="${hohenheim.app.domain}"/>
      <replace file="${app.dir}/build.xml" token="@@APPID@@" value="${hohenheim.appid}"/>
      <replace file="${app.dir}/build.xml" token="@@APPCLJFILES@@"
value="&lt;arg value='${hohenheim.app.domain}.core'/&gt;&lt;arg value='${hohenheim.app.domain}.pipe'/&gt;" />
    </target>

    <target name="build-app" if="hohenheim.appid">
      <ant antfile="build.xml" dir="${app.dir}" target="${hohenheim.app.task}"
        useNativeBasedir="true" inheritAll="false"/>
    </target>

    <target name="bundle-app">
      <antcall target="build-app"/>
      <zip  destfile="${pods.dir}/${hohenheim.appid}.pod">
        <fileset dir="${app.dir}">
          <exclude name="build.output.*"/>
        </fileset>
      </zip>
    </target>


</project>


