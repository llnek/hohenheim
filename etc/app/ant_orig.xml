<project name="hohenheim-runner" basedir="." default="release">

    <!-- DO NOT EDIT THIS FILE, IT IS MAINTAINED BY THE
          FRAMEWORK
    -->

    <scriptdef name="generateguid" language="javascript">
        <attribute name="property" />
        <![CDATA[
        importClass( java.util.UUID );
        project.setProperty( attributes.get( "property" ), UUID.randomUUID() );
        ]]>
    </scriptdef>
    <generateguid property="uuid" />

    <!--
    <taskdef name="uuid" className="org.apache.commons.id.uuid.task.UUIDTask"/>
    <uuid version="VERSION_FIVE"/>
    <property name="my.guid" value="77c02546-8e96-4687-949f-9461ee6a21de"/>
    -->
    <taskdef resource="net/sf/antcontrib/antlib.xml"/>

    <property environment="env"/>
    <property name="hohenheim.home" value="${env.HOHENHEIM_HOME}" />
    <property name="apps.dir" value="${hohenheim.home}/apps" />
    <property name="pods.dir" value="${hohenheim.home}/pods" />

    <propertyregex property="app.domain.path" input="${hohenheim.app.domain}"
        regexp="\." replace="/" global="true" defaultValue="${hohenheim.app.domain}"/>
    <property name="app.dir" value="${apps.dir}/${hohenheim.appid}" />
    <property name="src.main" value="${app.dir}/src/main" />
    <property name="src.test" value="${app.dir}/src/test" />

    <condition property="os.windows">
        <os name="windows"/>
    </condition>

    <available file="${src.main}/clojure" type="dir" property="src.clojure"/>
    <available file="${src.main}/groovy" type="dir" property="src.groovy"/>
    <available file="${src.main}/scala" type="dir" property="src.scala"/>
    <available file="${src.main}/java" type="dir" property="src.java"/>

    <property name="test.rpt.dir" value="${tmp.dir}/test-reports"/>
    <property name="test.cz.dir" value="${tmp.dir}/test-classes"/>
    <property name="cz.dir"  value="${app.dir}/POD-INF/classes" />

    <property name="webz.dir" value="${app.dir}/WEB-INF/classes" />
    <property name="podz.dir" value="${cz.dir}" />

    <path id="compile.classpath">
        <fileset dir="${app.dir}/POD-INF/lib">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${hohenheim.home}/patch">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${hohenheim.home}/dist">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${hohenheim.home}/lib">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="compile.test.classpath">
        <pathelement path="${test.cz.dir}"/>
        <pathelement path="${cz.dir}"/>
        <path refid="compile.classpath"/>
    </path>

    <target name="release" depends="">
        <echo message="hello world"/>
    </target>

    <target name="clean" depends="clean-classes">
    </target>

    <target name="clean-classes">
        <delete dir="${webz.dir}" quiet="true" failonerror="false"/>
        <delete dir="${cz.dir}" quiet="true" failonerror="false"/>
        <mkdir dir="${cz.dir}"/>
    </target>

    <target name="compile-test-code" depends="compile-code">
        <delete dir="${test.rpt.dir}" quiet="true"/>
        <delete dir="${test.cz.dir}" quiet="true"/>
        <mkdir dir="${test.rpt.dir}"/>
        <mkdir dir="${test.cz.dir}"/>
        <antcall target="ct-j"></antcall>
        <antcall target="ct-g"></antcall>
        <antcall target="ct-s"></antcall>
    </target>

    <target name="compile-code" depends="clean-classes">
      <taskdef name="groovyc" classname="org.codehaus.groovy.ant.Groovyc" classpathref="compile.classpath"/>
      <taskdef name="scalac" classname="scala.tools.ant.Scalac" classpathref="compile.classpath"/>
        <antcall target="cc-j"></antcall>
        <antcall target="cc-g"></antcall>
        <antcall target="cc-s"></antcall>
    </target>

    <target name="cc-j" depends="" if="src.java">
      <javac destdir="${cz.dir}" srcdir="${src.main}/java"
          includeAntRuntime="false" debug="on" debuglevel="lines,vars,source" >
          <classpath refid="compile.classpath"/>
      </javac>
      <copy todir="${cz.dir}">
        <fileset dir="${src.main}/java">
          <exclude name="**/*.java"/>
          <exclude name="**/.svn"/>
        </fileset>
      </copy>
    </target>

    <target name="ct-j" depends="" if="src.java">
      <javac destdir="${test.cz.dir}" srcdir="${src.test}/java"
            includeAntRuntime="false" debug="on" debuglevel="lines,vars,source" >
            <classpath refid="compile.test.classpath"/>
      </javac>
      <copy todir="${test.cz.dir}">
        <fileset dir="${src.test}/java">
          <exclude name="**/*.java"/>
          <exclude name="**/.svn"/>
        </fileset>
      </copy>
    </target>

    <target name="cc-g" depends="" if="src.groovy">
      <groovyc destdir="${cz.dir}" srcdir="${src.main}/groovy" >
          <classpath refid="compile.classpath"/>
      </groovyc>
      <copy todir="${cz.dir}">
        <fileset dir="${src.main}/groovy">
          <exclude name="**/*.groovy"/>
          <exclude name="**/.svn"/>
        </fileset>
      </copy>
    </target>

    <target name="ct-g" depends="" if="src.groovy">
      <groovyc destdir="${test.cz.dir}" srcdir="${src.test}/groovy" >
          <classpath refid="compile.test.classpath"/>
      </groovyc>
      <copy todir="${test.cz.dir}">
        <fileset dir="${src.test}/groovy">
          <exclude name="**/*.groovy"/>
          <exclude name="**/.svn"/>
        </fileset>
      </copy>
    </target>

    <target name="cc-s" depends="" if="src.scala">
      <scalac destdir="${cz.dir}" srcdir="${src.main}/scala"
          classpathref="compile.classpath">
          <include name="**/*.scala"/>
      </scalac>
      <copy todir="${cz.dir}">
        <fileset dir="${src.main}/scala">
          <exclude name="**/*.scala"/>
          <exclude name="**/.svn"/>
        </fileset>
      </copy>
    </target>

    <target name="ct-s" depends="" if="src.scala">
      <scalac destdir="${test.cz.dir}" srcdir="${src.test}/scala"
            classpathref="compile.test.classpath">
        <include name="**/*.scala"/>
      </scalac>
      <copy todir="${test.cz.dir}">
        <fileset dir="${src.test}/scala">
          <exclude name="**/*.scala"/>
          <exclude name="**/.svn"/>
        </fileset>
      </copy>
    </target>

    <target name="jar" depends="">
      <jar destfile="${app.dir}/POD-INF/lib${app.name}.jar" basedir="${cz.dir}"/>
      <delete dir="${cz.dir}"/>
      <mkdir dir="${cz.dir}"/>
    </target>

    <target name="run-app-bg-nix" depends="">
        <exec executable="${hohenheim.home}/bin/hohenheim" dir="${hohenheim.home}">
            <arg value="app"/>
            <arg value="start"/>
            <arg value="bg"/>
        </exec>
    </target>

    <target name="run-app-bg-w32" depends="">
        <exec executable="cmd.exe" dir="${hohenheim.home}">
            <arg value="/C"/>
            <arg value="start"/>
            <arg value="/B"/>
            <arg value="/MIN"/>
            <arg value="${hohenheim.home}/bin/hohenheim.bat"/>
            <arg value="start"/>
        </exec>
    </target>

    <target name="run-dbg-app-w32" depends="">
        <exec executable="${hohenheim.home}/bin/hohenheim.bat" dir="${hohenheim.home}">
            <arg value="debug"/>
        </exec>
    </target>

    <target name="run-dbg-app-nix" depends="">
        <exec executable="${hohenheim.home}/bin/hohenheim" dir="${hohenheim.home}">
            <arg value="debug"/>
        </exec>
    </target>

    <target name="test-code" depends="compile-test-code">
      <junit logfailedtests="true" showoutput="false" printsummary="yes" fork="yes" haltonfailure="yes" >
        <classpath refid="compile.test.classpath"/>
        <batchtest todir="${test.rpt.dir}" >
            <fileset dir="${test.cz.dir}">
                <include name="**/Test*.*"/>
            </fileset>
            <formatter type="plain" usefile="false"/>
        </batchtest>
      </junit>
    </target>

    <target name="create-demo" if="demo.id">
      <available file="${hohenheim.home}/docs/samples/${demo.id}.pod" property="demo.pod.ok"/>
      <if><equals arg1="${demo.pod.ok}" arg2="true"/>
        <then>
          <mkdir dir="${apps.dir}/demo-${demo.id}"/>
          <unzip src="${hohenheim.home}/docs/samples/${demo.id}.pod" dest="${apps.dir}/demo-${demo.id}" />
        </then>
        <else>
          <echo message="Cannot locate ${demo.id}.pod."/>
        </else>
      </if>
    </target>

    <target name="create-samples">
      <for param="pod">
        <path>
          <fileset dir="${hohenheim.home}/docs/samples">
            <include name="*.pod"/>
          </fileset>
        </path>
        <sequential>
          <var name="appid" value="" unset="true"/>
          <basename property="appid" file="@{pod}" suffix=".pod"/>
          <mkdir dir="${apps.dir}/demo-${appid}"/>
          <unzip src="@{pod}" dest="${apps.dir}/demo-${appid}" />
        </sequential>
      </for>
    </target>

    <target name="create-app">
      <antcall target="create-app-common"/>
      <copy todir="${app.dir}" file="${hohenheim.home}/etc/app/build.xml"/>
      <antcall target="post-create-app"/>
    </target>

    <target name="create-app-common">
      <mkdir dir="${app.dir}"/>
      <touch file="${app.dir}/POD-INF/classes/dummy.txt" mkdirs="true"/>
      <touch file="${app.dir}/POD-INF/patch/dummy.txt" mkdirs="true"/>
      <touch file="${app.dir}/POD-INF/lib/dummy.txt" mkdirs="true"/>
      <mkdir dir="${app.dir}/META-INF"/>
      <copy todir="${app.dir}/META-INF" file="${hohenheim.home}/etc/app/MANIFEST.MF"/>
      <touch file="${app.dir}/META-INF/RELEASE-NOTES.txt" />
      <touch file="${app.dir}/META-INF/NOTES.txt" />
      <touch file="${app.dir}/META-INF/LICENSE.txt" />
      <touch file="${app.dir}/META-INF/README.md" />

      <mkdir dir="${app.dir}/modules"/>
      <!--
      <copy todir="${app.dir}/modules" file="${hohenheim.home}/etc/modules/module_auth"/>
      <replace file="${app.dir}/modules/module_auth" token="@@HHH_HOME@@" value="${hohenheim_home}"/>
      <replace file="${app.dir}/modules/module_auth" token="@@APP_DIR@@" value="${app.dir}"/>
      <chmod file="${app.dir}/modules/module_auth" perm="755" />
      -->
      <mkdir dir="${app.dir}/conf"/>
      <copy todir="${app.dir}/conf" file="${hohenheim.home}/etc/app/app.conf"/>
      <copy todir="${app.dir}/conf" file="${hohenheim.home}/etc/app/env.conf"/>
      <copy todir="${app.dir}/conf" file="${hohenheim.home}/etc/app/shiro.ini"/>
      <replace file="${app.dir}/conf/app.conf" token="@@USER@@" value="${user.name}"/>
      <mkdir dir="${app.dir}/src/main/clojure/${app.domain.path}"/>
      <mkdir dir="${app.dir}/src/main/scala"/>
      <mkdir dir="${app.dir}/src/main/java"/>
      <mkdir dir="${app.dir}/src/main/resources"/>
      <copy todir="${app.dir}/src/main/clojure/${app.domain.path}" file="${hohenheim.home}/etc/app/core.clj"/>
      <copy todir="${app.dir}/src/main/clojure/${app.domain.path}" file="${hohenheim.home}/etc/app/pipe.clj"/>
      <mkdir dir="${app.dir}/src/test/clojure/${app.domain.path}"/>
      <mkdir dir="${app.dir}/docs"/>

      <copy todir="${app.dir}" file="${hohenheim.home}/etc/app/build.properties"/>
      <copy todir="${app.dir}" file="${hohenheim.home}/etc/app/ivysettings.xml"/>
      <copy todir="${app.dir}" file="${hohenheim.home}/etc/app/ivy.xml"/>
      <copy todir="${app.dir}" file="${hohenheim.home}/etc/app/pom.xml"/>

      <replace file="${app.dir}/META-INF/MANIFEST.MF" token="@@APPKEY@@" value="${uuid}"/>
      <replace file="${app.dir}/META-INF/MANIFEST.MF" token="@@APPMAINCLASS@@"
        value="${hohenheim.app.domain}.core.MyAppMain"/>
      <replace file="${app.dir}/pom.xml" token="@@APPDOMAIN@@" value="${hohenheim.app.domain}"/>
      <replace file="${app.dir}/pom.xml" token="@@APPID@@" value="${hohenheim.appid}"/>
      <replace file="${app.dir}/ivy.xml" token="@@APPID@@" value="${hohenheim.appid}"/>
      <replace file="${app.dir}/ivy.xml" token="@@APPDOMAIN@@" value="${hohenheim.app.domain}"/>
      <replace file="${app.dir}/build.properties"
        token="@@HOHENHEIMHOME@@" value="${hohenheim.home}"/>

    </target>

    <target name="create-jetty">
      <antcall target="create-app-common"/>
      <antcall target="create-web-common"/>
      <mkdir dir="${app.dir}/WEB-INF/classes"/>
      <mkdir dir="${app.dir}/WEB-INF/lib"/>
      <copy tofile="${app.dir}/conf/env.conf" file="${hohenheim.home}/etc/jetty/jetty.conf" overwrite="true"/>
      <copy todir="${app.dir}/WEB-INF" file="${hohenheim.home}/etc/jetty/web.xml"/>
      <antcall target="post-create-app"/>
    </target>

    <target name="create-web">
      <antcall target="create-app-common"/>
      <antcall target="create-web-common"/>
      <copy todir="${app.dir}/conf" overwrite="true">
        <fileset dir="${hohenheim.home}/etc/netty">
            <include name="*.conf"/>
        </fileset>
      </copy>
      <copy todir="${app.dir}/conf" file="${hohenheim.home}/etc/netty/static-routes.conf" overwrite="true"/>
      <copy todir="${app.dir}/conf" file="${hohenheim.home}/etc/netty/routes.conf" overwrite="true"/>
      <copy todir="${app.dir}/public/images" file="${hohenheim.home}/etc/web/favicon.png"/>
      <mkdir dir="${app.dir}/pages/errors"/>
      <mkdir dir="${app.dir}/pages/views"/>
      <copy todir="${app.dir}/pages/views" >
        <fileset dir="${hohenheim.home}/etc/netty">
          <include name="*.ftl"/>
        </fileset>
      </copy>
      <copy todir="${app.dir}/pages" >
        <fileset dir="${hohenheim.home}/etc/netty">
          <exclude name="index.html"/>
          <include name="*.html"/>
        </fileset>
      </copy>
      <copy todir="${app.dir}/public" file="${hohenheim.home}/etc/netty/index.html"/>
      <copy todir="${app.dir}/src/main/resources/less" file="${hohenheim.home}/etc/netty/main.less"/>
      <replace file="${app.dir}/conf/routes.conf" token="@@APPDOMAIN@@" value="${hohenheim.app.domain}"/>
      <copy todir="${app.dir}/src/main/clojure/${app.domain.path}"
        file="${hohenheim.home}/etc/netty/pipe.clj" overwrite="true"/>
      <antcall target="post-create-app"/>
    </target>

    <target name="create-web-common">
      <mkdir dir="${app.dir}/src/main/resources/coffee"/>
      <mkdir dir="${app.dir}/src/main/resources/js"/>
      <mkdir dir="${app.dir}/src/main/resources/less"/>
      <mkdir dir="${app.dir}/public/images"/>
      <mkdir dir="${app.dir}/public/scripts"/>
      <mkdir dir="${app.dir}/public/styles"/>
      <copy todir="${app.dir}/public/images" file="${hohenheim.home}/etc/web/favicon.png"/>
      <copy todir="${app.dir}/src/main/clojure/${app.domain.path}"
        file="${hohenheim.home}/etc/web/pipe.clj" overwrite="true"/>
      <copy todir="${app.dir}/public">
        <fileset dir="${hohenheim.home}/etc/weblibs"/>
      </copy>
      <copy todir="${app.dir}" file="${hohenheim.home}/etc/web/build.xml"/>
    </target>

    <target name="post-create-app">
      <replace file="${app.dir}/src/main/clojure/${app.domain.path}/core.clj"
        token="@@APPDOMAIN@@" value="${hohenheim.app.domain}"/>
      <replace file="${app.dir}/src/main/clojure/${app.domain.path}/pipe.clj"
        token="@@APPDOMAIN@@" value="${hohenheim.app.domain}"/>
      <replace file="${app.dir}/conf/env.conf" token="@@APPDOMAIN@@" value="${hohenheim.app.domain}"/>
      <replace file="${app.dir}/build.xml" token="@@APPID@@" value="${hohenheim.appid}"/>
      <replace file="${app.dir}/build.xml" token="@@APPCLJFILES@@"
value="&lt;arg value='${hohenheim.app.domain}.core'/&gt;&lt;arg value='${hohenheim.app.domain}.pipe'/&gt;" />
    </target>

    <target name="build-app" if="hohenheim.appid">
      <ant antfile="build.xml" dir="${app.dir}" target="${hohenheim.app.task}"
        useNativeBasedir="true" inheritAll="false"/>
    </target>

    <target name="bundle-app">
      <antcall target="build-app"/>
      <zip  destfile="${pods.dir}/${hohenheim.appid}.pod">
        <fileset dir="${app.dir}">
          <exclude name="build.output.*"/>
        </fileset>
      </zip>
    </target>


</project>


