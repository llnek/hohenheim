<project name="@@APPID@@" basedir="." default="devmode" xmlns:ivy="antlib:org.apache.ivy.ant">

  <property name="PID" value="${ant.project.name}"/>
  <property file="build.properties" />

  <ivy:settings file="${basedir}/ivysettings.xml"/>

  <path id="hohenheimlibs.id">
    <fileset dir="${hohenheim.home}/lib"/>
  </path>

  <!-- paths used for compilation and run  -->
  <path id="compile.path.id">
    <path location="${out.jar.dir}" />
    <path location="${src.dir}/clojure" />
    <fileset dir="${lib.dir}" />
    <fileset dir="${hohenheim.home}/dist"/>
    <fileset dir="${hohenheim.home}/lib"/>
  </path>

  <path id="test.path.id">
    <path location="${out.test.dir}" />
    <path location="${test.dir}/clojure" />
    <path refid="compile.path.id" />
  </path>


  <taskdef name="scalac" classname="scala.tools.ant.Scalac" classpathref="hohenheimlibs.id"/>
  <taskdef resource="net/sf/antcontrib/antlib.xml"/>

  <!-- resolve ivy stuff ================================= -->
  <target name="resolve">
    <ivy:retrieve pattern="${lib.dir}/[artifact]-[revision].[ext]"/>
  </target>

  <!-- target: build ================================= -->
  <target name="build" depends="clean,resolve,pre-build">
    <echo level="info" message="#############################################"/>
    <echo level="info" message="# building: ${ant.project.name}"/>
    <echo level="info" message="#############################################"/>
    <antcall target="compile_and_jar"/>
    <antcall target="compile_coffee"/>
    <antcall target="compile_less"/>
    <antcall target="compact_other_jsfiles"/>
  </target>

  <target name="compact_other_jsfiles">
    <concat destfile="${basedir}/public/scripts/webcommon.js" append="true">
      <filelist dir="${basedir}/public/jquery" files="jquery-2.0.3.min.js"/>
      <filelist dir="${basedir}/public/underscore" files="underscore-min.js"/>
      <filelist dir="${basedir}/public/bootstrap/js" files="bootstrap.min.js"/>
      <filelist dir="${basedir}/public/l10njs" files="l10n.min.js"/>
      <filelist dir="${basedir}/public/datejs" files="date-en-US.js"/>
      <filelist dir="${basedir}/public/backbone" files="backbone-min.js"/>
    </concat>
  </target>

  <!-- target: build-prod ================================= -->
  <target name="build-prod" depends="build,clean-public">
    <antcall target="yui_css"/>
    <antcall target="yui_js"/>
    <antcall target="final_phase"/>
  </target>

  <!-- target: test-build ================================= -->
  <target name="test-build" depends="build">
    <antcall target="compile_test_code"/>
    <antcall target="run_test_code"/>
    <echo level="verbose" message="test called - OK"/>
  </target>

  <!-- target: clean ================================= -->
  <target name="clean">
    <delete includeemptydirs="true">
      <fileset erroronmissingdir="false" dir="${out.test.dir}" includes="**/*"/>
      <fileset erroronmissingdir="false" dir="${out.jar.dir}" includes="**/*"/>
      <fileset erroronmissingdir="false" dir="${build.dir}" includes="**/*"/>
    </delete>
    <delete file="${PID}-${build.version}.jar" quiet="true"/>
    <antcall target="clean-public"/>
  </target>

  <target name="clean-public">
    <delete includeemptydirs="true">
    <fileset erroronmissingdir="false" dir="${basedir}/public/scripts" includes="**/*"/>
    <fileset erroronmissingdir="false" dir="${basedir}/public/styles" includes="**/*"/>
    </delete>
  </target>

  <!-- target: clean-cache ================================= -->
  <target name="clean-cache">
    <ivy:cleancache />
  </target>

  <!-- target: clean-local ================================= -->
  <target name="clean-local">
    <echo message="${ivy.lrepo.dir}"/>
  </target>

  <!-- target: report ================================= -->
  <target name="report" depends="resolve">
    <ivy:report todir="${build.dir}"/>
  </target>

  <target name="pre-build">
    <mkdir dir="${basedir}/POD-INF/classes" />
    <mkdir dir="${build.dir}" />
    <mkdir dir="${build.dir}/css" />
    <mkdir dir="${build.dir}/js" />
  </target>

  <!-- target: compile server-side source code ================================= -->
  <target name="compile-clj">
    <java classname="clojure.lang.Compile" fork="true" failonerror="true" 
      maxmemory="2048m" classpathref="compile.path.id">
      <sysproperty key="clojure.compile.warn-on-reflection" value="true"/>
      <sysproperty key="clojure.compile.path" value="${build.dir}" />
      @@APPCLJFILES@@
    </java>
    <copy todir="${out.jar.dir}">
      <fileset dir="${build.dir}">
      </fileset>
    </copy>
  </target>

  <target name="compile_and_jar">

    <javac sourcepath="" srcdir="${src.dir}/java" destdir="${out.jar.dir}"
      includeantruntime="false" excludes=""
      debug="${build.debug}" debuglevel="lines,vars,source" classpathref="compile.path.id">
      <compilerarg line="-Xlint:deprecation -Xlint:unchecked"/>
      <include name="**/*.java"/>
    </javac>

    <scalac srcdir="${src.dir}/scala" destdir="${out.jar.dir}" classpathref="compile.path.id" jvmargs="-Xmx5120M -Xms1024M " fork="false">
      <include name="**/*.scala"/>
    </scalac>

    <antcall target="compile-clj"/>

    <!-- copy over other resources -->
    <copy todir="${out.jar.dir}">
      <fileset dir="${src.dir}/java">
        <exclude name="**/*.java"/>
        <exclude name="**/.svn"/>
      </fileset>
      <fileset dir="${src.dir}/scala">
        <exclude name="**/*.scala"/>
        <exclude name="**/.svn"/>
      </fileset>
      <fileset dir="${src.dir}/clojure">
        <exclude name="**/*.clj"/>
        <exclude name="**/.svn"/>
      </fileset>
    </copy>

    <jar destfile="${lib.dir}/${PID}-${build.version}.jar" >
      <fileset dir="${out.jar.dir}">
      </fileset>
    </jar>

  </target>

  <!-- compile test code -->
  <target name="compile_test_code" >

    <mkdir dir="${out.test.dir}"/>
    <mkdir dir="${report.dir}"/>

    <scalac srcdir="${test.dir}/scala" destdir="${out.test.dir}" classpathref="test.path.id" jvmargs="-Xmx5120M -Xms1024M" fork="false">
      <include name="**/*.scala"/>
    </scalac>

    <copy todir="${out.test.dir}">
      <fileset dir="${test.dir}/scala">
        <exclude name="**/.svn"/>
        <exclude name="**/*.scala"/>
      </fileset>
    </copy>

  </target>

  <!-- run test code -->
  <target name="run_test_code" >

    <taskdef name="scalatest" classname="org.scalatest.tools.ScalaTestAntTask">
      <classpath refid="test.path.id"/>
    </taskdef>

    <scalatest haltonfailure="true" fork="false" maxmemory="888M">
      <reporter type="stderr"/>
      <wildcard package="application"/>
      <runpath>
        <pathelement path="${out.test.dir}"/>
      </runpath>
    </scalatest>

  </target>

  <target name="compile_coffee">
    <copy todir="${build.dir}/js">
      <fileset dir="${src.dir}/resources/coffee"><include name="*.coffee"/></fileset>
    </copy>
    <copy todir="${build.dir}/js">
      <fileset dir="${src.dir}/resources/js"><include name="*.js"/></fileset>
    </copy>
    <exec executable="coffee">
      <arg value="--bare"/> <arg value="--output"/> <arg value="${build.dir}/js"/>
      <arg value="--compile"/> <arg value="${build.dir}/js"/>
    </exec>
    <copy todir="${basedir}/public/scripts"><fileset dir="${build.dir}/js"><include name="*.js"/></fileset></copy>
  </target>

  <target name="yui_css">
    <apply executable="java" parallel="false">
      <fileset dir="${build.dir}/css">
        <exclude name="*.min.css"/>
        <include name="*.css"/>
      </fileset>
      <arg line="-jar" />
      <arg path="${hohenheim.home}/lib/yuicompressor-2.4.7.jar" />
      <srcfile/>
      <arg line="-o"/>
      <chainedmapper>
        <mapper type="glob" from="*.css" to="*.min.css"/>
        <globmapper from="*" to="${build.dir}/css/*"/>
      </chainedmapper>
      <targetfile/>
    </apply>
  </target>

  <target name="yui_js">
    <apply executable="java" parallel="false">
      <fileset dir="${build.dir}/js">
        <exclude name="*.min.js"/>
        <include name="*.js"/>
      </fileset>
        <arg line="-jar" />
        <arg path="${hohenheim.home}/lib/yuicompressor-2.4.7.jar" />
        <srcfile/>
        <arg line="-o"/>
        <chainedmapper>
          <mapper type="glob" from="*.js" to="*.min.js"/>
          <globmapper from="*" to="${build.dir}/js/*"/>
        </chainedmapper>
        <targetfile/>
      </apply>
  </target>

  <target name="compile_less">
    <copy todir="${build.dir}/css">
      <fileset dir="${src.dir}/resources/less"><include name="*.css"/></fileset>
    </copy>
    <apply executable="lessc" parallel="false">
      <fileset dir="${src.dir}/resources/less">
        <include name="*.less"/>
      </fileset>
        <srcfile/>
        <chainedmapper>
          <mapper type="glob" from="*.less" to="*.css"/>
          <globmapper from="*" to="${build.dir}/css/*"/>
        </chainedmapper>
        <targetfile/>
    </apply>
    <copy todir="${basedir}/public/styles"><fileset dir="${build.dir}/css"><include name="*.css"/></fileset></copy>
  </target>

  <target name="final_phase">
    <copy todir="${basedir}/public/scripts">
      <fileset dir="${build.dir}/js">
        <include name="*.min.js"/>
      </fileset>
    </copy>
    <copy todir="${basedir}/public/styles">
      <fileset dir="${build.dir}/css">
        <include name="*.min.css"/>
      </fileset>
    </copy>
    <antcall target="compact_other_jsfiles"/>
  </target>

  <!--
       public TARGETS
       -->

  <target name="release" depends="build-prod"/>
  <target name="devmode" depends="build"/>
  <target name="test" depends="test-build"/>

  <target name="c4git">
    <delete includeemptydirs="true">
      <fileset erroronmissingdir="false" dir="${basedir}/src/main/resources/less" includes="*.min.css"/>
      <fileset erroronmissingdir="false" dir="${basedir}/src/main/resources/js" includes="*.min.js"/>
      <fileset erroronmissingdir="false" dir="${basedir}/public/styles" includes="*.min.css"/>
      <fileset erroronmissingdir="false" dir="${basedir}/public/scripts" includes="*.min.js"/>
    </delete> 
  </target>

</project>




