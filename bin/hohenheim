#!/bin/bash

splash_crawford() {
  echo " __ __   ___   __ __    ___  ____   __ __    ___  ____  ___ ___ "
  echo "|  T  T /   \ |  T  T  /  _]|    \ |  T  T  /  _]l    j|   T   T"
  echo "|  l  |Y     Y|  l  | /  [_ |  _  Y|  l  | /  [_  |  T | _   _ |"
  echo "|  _  ||  O  ||  _  |Y    _]|  |  ||  _  |Y    _] |  | |  \_/  |"
  echo "|  |  ||     ||  |  ||   [_ |  |  ||  |  ||   [_  |  | |   |   |"
  echo "|  |  |l     !|  |  ||     T|  |  ||  |  ||     T j  l |   |   |"
  echo "l__j__j \___/ l__j__jl_____jl__j__jl__j__jl_____j|____jl___j___j"
}

splash_crawford2() {
  echo " __ __   ___   __ __    ___  ____   __ __    ___  ____  ___ ___ "
  echo "|  |  | /   \ |  |  |  /  _]|    \ |  |  |  /  _]|    ||   |   |"
  echo "|  |  ||     ||  |  | /  [_ |  _  ||  |  | /  [_  |  | | _   _ |"
  echo "|  _  ||  O  ||  _  ||    _]|  |  ||  _  ||    _] |  | |  \_/  |"
  echo "|  |  ||     ||  |  ||   [_ |  |  ||  |  ||   [_  |  | |   |   |"
  echo "|  |  ||     ||  |  ||     ||  |  ||  |  ||     | |  | |   |   |"
  echo "|__|__| \___/ |__|__||_____||__|__||__|__||_____||____||___|___|"
}

splash_bubble() {
  echo "   _   _   _   _   _   _   _   _   _"
  echo "  / \ / \ / \ / \ / \ / \ / \ / \ / \ "
  echo " ( H | o | h | e | n | h | e | i | m )"
  echo "  \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/"
}

splash() {
  echo ""
  splash_crawford2
  #splash_bubble
  #echo ""
  #echo -n "Version: "
  #cat $HOHENHEIM_HOME/VERSION
  echo ""
  echo ""
}

### osx sux, has no proper readlink.
check_darwin() {
  HOHENHEIM_BIN=$( perl -e 'use Cwd "abs_path";print abs_path(shift)' $0 )
  HOHENHEIM_BIN=$( dirname $HOHENHEIM_BIN )
  HOHENHEIM_HOME=$( dirname $HOHENHEIM_BIN )
}
check_linux() {
  HOHENHEIM_BIN=$(dirname $(readlink -f $0))/../
  HOHENHEIM_HOME=$(readlink -f $HOHENHEIM_BIN)
  HOHENHEIM_BIN=$HOHENHEIM_HOME/bin
}

OSTYPE=`uname -s`
CWD=`pwd`

if [ "$OSTYPE" = "Darwin" ]; then
  check_darwin
else
  check_linux
fi

# make a sym-link; hhh is much shorter.
if [ ! -e $HOHENHEIM_BIN/hhh ]; then
  ln -s $HOHENHEIM_BIN/hohenheim $HOHENHEIM_BIN/hhh
fi

if [ "$JAVA_HOME" = "" ] ; then
  echo "Attempt to reference standard java location on system: /usr/bin."
  #echo "Please set JAVA_HOME"
  #exit -1
  JAVA_HOME=/usr
fi

build_all() {
  cd apps
  for a in `ls`
  do
    cd  $CWD
    ./bin/hohenheim build $a
  done
}


JPROF=-agentpath:/Applications/jprofiler7/bin/macos/libjprofilerti.jnilib=port=8849
DBGOPTS="-agentlib:jdwp=transport=dt_socket,server=y,address=8787,suspend=n"
PATCHDIR=$HOHENHEIM_HOME/patch/*
DISTRO=$HOHENHEIM_HOME/dist/*
BOOT=$HOHENHEIM_HOME/boot/*
LIBDIR=$HOHENHEIM_HOME/lib/*
BCP=$BOOT:$PATCHDIR:$DISTRO:$LIBDIR:$CLASSPATH

JAVA_CMD=$JAVA_HOME/bin/java
BG=false

VMXRGS=" -XX:+CMSClassUnloadingEnabled -XX:+UseConcMarkSweepGC -XX:MaxPermSize=256m"
CLDR=" -Djava.system.class.loader=com.zotoh.hohenheim.loaders.ExecClassLoader"
MAINCZ=comzotohcljc.hhh.etc.core

LIBP="-Djava.library.path=$HOHENHEIM_HOME/bin"
#48G
#VMARGS="-Xms8192m -Xmx49152m"
#36G
#VMARGS="-Xms8192m -Xmx36864m"
#32G
#VMARGS="-Xms8192m -Xmx32768m"
VMARGS="-Xms512m -Xmx7096m $VMXRGS"
LOG4J=etc/log/logback.xml
L4JFILE=${HOHENHEIM_HOME}/$LOG4J
L4J=file:${L4JFILE}
LOGCFG=$L4J
#LOGREF="-Dlogback.configurationFile=$LOGCFG -Dlogback.ContextSelector=com.zotoh.frwk.util.LogbackCtxSelector"
LOGREF="-Dlogback.configurationFile=$LOGCFG"
BASEDIR="-Dhohenheim.home=$HOHENHEIM_HOME"
KPORT=4444
KILLPORT="-Dhohenheim.kill.port=$KPORT"

show_proc() {
    pid=$( ps -ef | grep comzotohcljc.hhh.etc.core | grep -v grep | awk '{print $2}' )
    if [ -n "$pid" ]; then
      echo "Hohenheim is running with process-id: ${pid}."
    else
      echo "Hohenheim is not running."
    fi
}
stop_proc() {
    pid=$( ps -ef | grep comzotohcljc.hhh.etc.core | grep -v grep | awk '{print $2}' )
    if [ -n "$pid" ]; then
      #kill $pid
      cd /tmp
      wget http://127.0.0.1:$KPORT/kill9 2>&1 > /dev/null
      cd $CWD
    fi
}

if [ ! -e ${L4JFILE} ]; then
    LOGREF=
fi

if [ $# -eq 2 ] ; then
    if [ "$1" = "start" -a "$2" = "bg" ]; then
       BG=true
    fi
fi

if [ $# -eq 1 -a "$1" = "debug" ]; then
  echo "remote debug mode"
else
  DBGOPTS=
fi

if [ $# -eq 1 -a "$1" = "stop" ]; then
  echo "stopping hohenheim..."
  stop_proc
  exit $?
fi

if [ $# -eq 1 -a "$1" = "status" ]; then
  show_proc
  exit 0
fi

if [ $# -eq 1 -a "$1" = "build-all" ]; then
  build_all
  exit 0
fi


#CMDLINE="$JAVA_CMD -cp $BCP $DBGOPTS $LOGREF $BASEDIR $CLDR $MAINCZ $HOHENHEIM_HOME $@ "
cd $HOHENHEIM_BIN
if [ "$BG" = "true" ]; then
  nohup $JAVA_CMD $VMARGS -cp $BCP $LIBP $DBGOPTS $LOGREF $KILLPORT $BASEDIR $CLDR $MAINCZ $HOHENHEIM_HOME $@ &
else
  splash
  $JAVA_CMD $VMARGS -cp $BCP $LIBP $DBGOPTS $LOGREF $KILLPORT $BASEDIR $CLDR $MAINCZ $HOHENHEIM_HOME $@
fi
cd $CWD
exit 0




